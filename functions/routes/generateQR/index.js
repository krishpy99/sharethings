// routes/generateQR/index.js - QR code generation handler
const QRCode = require('qrcode');
const { extractUserId } = require('../../utils/authHelper');

const headers = {
  'Content-Type': 'application/json',
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Methods': 'POST,OPTIONS',
  'Access-Control-Allow-Headers': 'Content-Type,Authorization'
};

module.exports = async (event) => {
  try {
    if (event.httpMethod === 'OPTIONS') {
      return {
        statusCode: 200,
        headers,
        body: JSON.stringify({ success: true })
      };
    }
    
    if (event.httpMethod !== 'POST') {
      return {
        statusCode: 405,
        headers,
        body: JSON.stringify({
          success: false,
          error: 'Method not allowed. Use POST to generate QR codes.'
        })
      };
    }
    
    // Parse request body
    const body = event.body || {};
    const { text } = body;
    
    // Verify user is authenticated (optional for QR generation but useful for logging)
    const userId = await extractUserId(event);
    
    if (!text) {
      return {
        statusCode: 400,
        headers,
        body: JSON.stringify({
          success: false,
          error: 'Text parameter is required'
        })
      };
    }
    
    // Generate QR code as base64 data URL
    const qrDataUrl = await QRCode.toDataURL(text, {
      errorCorrectionLevel: 'H',
      margin: 1,
      width: 300
    });
    
    // Log generation (for analytics, could be stored in DB)
    console.log(`QR code generated by user ${userId} for text: ${text.substring(0, 30)}...`);
    
    return {
      statusCode: 200,
      headers,
      body: JSON.stringify({
        success: true,
        qrCode: qrDataUrl
      })
    };
    
  } catch (error) {
    console.error('Error generating QR code:', error);
    return {
      statusCode: 500,
      headers,
      body: JSON.stringify({
        success: false,
        error: `Failed to generate QR code: ${error.message}`
      })
    };
  }
};